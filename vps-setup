#!/bin/bash

# Update system packages
echo "Updating system packages..."
dnf update -y

# Install necessary dependencies
echo "Installing required packages..."
dnf install -y yum-utils device-mapper-persistent-data lvm2 wget firewalld curl policycoreutils-python-utils bind-utils nano

# Install Docker and Docker Compose
echo "Setting up Docker repository..."
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
echo "Installing Docker..."
dnf install -y docker-ce docker-ce-cli containerd.io
systemctl start docker
systemctl enable docker
usermod -aG docker $USER

echo "Installing Docker Compose..."
DOCKER_COMPOSE_VERSION="v2.22.0"
curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Verify Docker and Docker Compose installation
docker --version
docker-compose --version

# Setup Swap Space if not present
echo "Setting up Swap space..."
SWAPFILE=/swapfile
if [ ! -f "$SWAPFILE" ]; then
    dd if=/dev/zero of=$SWAPFILE bs=1G count=4
    chmod 600 $SWAPFILE
    mkswap $SWAPFILE
    swapon $SWAPFILE
    echo "$SWAPFILE none swap sw 0 0" >> /etc/fstab
fi

# Enable and start firewalld
echo "Starting and enabling Firewalld..."
systemctl enable firewalld --now

# Allow necessary ports
echo "Configuring firewall..."
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https
firewall-cmd --permanent --add-port=8443/tcp
firewall-cmd --permanent --add-port=8447/tcp
firewall-cmd --reload

# Install and configure Nginx
echo "Installing Nginx..."
dnf install -y nginx

# Set the ownership of the SSL certificates and key to the nginx user
echo "Setting ownership and permissions for SSL files..."
chown nginx:nginx /mnt/data/www.secure-connect.us_ssl_certificate.cer
chown nginx:nginx /mnt/data/www.secure-connect.us_private_key.key
chown nginx:nginx /mnt/data/www.secure-connect.us_ssl_certificate_INTERMEDIATE.cer

# Set restrictive permissions on the SSL certificates and key
chmod 600 /mnt/data/www.secure-connect.us_ssl_certificate.cer
chmod 600 /mnt/data/www.secure-connect.us_private_key.key
chmod 600 /mnt/data/www.secure-connect.us_ssl_certificate_INTERMEDIATE.cer

# Nginx SSL configuration
echo "Configuring Nginx for SSL..."
NGINX_CONF="/etc/nginx/nginx.conf"

cat <<EOL > $NGINX_CONF
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  secure-connect.us;

        location / {
            return 301 https://\$host\$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name secure-connect.us;

        ssl_certificate     /mnt/data/www.secure-connect.us_ssl_certificate.cer;
        ssl_certificate_key /mnt/data/www.secure-connect.us_private_key.key;
        ssl_trusted_certificate /mnt/data/www.secure-connect.us_ssl_certificate_INTERMEDIATE.cer;

        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;

        location / {
            proxy_pass http://localhost:8443;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOL

# Ensure Nginx is started
echo "Starting Nginx..."
systemctl restart nginx
systemctl enable nginx

# Install Kasm Workspaces
echo "Downloading Kasm Workspaces..."
KASM_VERSION="1.15.0.06fdc8"
wget https://kasm-static-content.s3.amazonaws.com/kasm_release_${KASM_VERSION}.tar.gz -O /tmp/kasm_release_${KASM_VERSION}.tar.gz

echo "Extracting Kasm Workspaces..."
cd /tmp
tar -xvzf kasm_release_${KASM_VERSION}.tar.gz

echo "Installing Kasm Workspaces..."
cd /tmp/kasm_release
./install.sh -s

# Capture Kasm credentials
echo "Capturing Kasm credentials..."
grep -i 'Admin' /tmp/kasm_release/kasm_install.log > /tmp/kasm_credentials

# Final message
echo "Kasm installation completed. Credentials saved to /tmp/kasm_credentials."
echo "Visit https://secure-connect.us to access the Kasm server."

